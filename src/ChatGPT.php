<?php
/**
 * Elasticsearch ChatGPT PHP
 *
 * @link      https://github.com/elastic/elasticsearch-chatgpt-php
 * @copyright Copyright (c) Elasticsearch B.V (https://www.elastic.co)
 * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache 2.0 License
 *
 * Licensed to Elasticsearch B.V under one or more agreements.
 * Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
 * See the LICENSE file in the project root for more information.
 */
declare(strict_types=1);

namespace Elastic\Elasticsearch\ChatGPT;

use Elastic\Elasticsearch\ChatGPT\Exception\InvalidChatGPTException;
use Elastic\Elasticsearch\ChatGPT\Exception\InvalidElasticsearchException;
use Elastic\Elasticsearch\ChatGPT\Exception\MissingDirectoryException;
use Elastic\Elasticsearch\Client as EsClient;
use Elastic\Elasticsearch\Exception\ElasticsearchException;
use Elastic\Elasticsearch\Response\Elasticsearch as ElasticsearchResponse;
use OpenAI\Contracts\ClientContract as OpenAIClient;

class ChatGPT
{
    const CACHE_DIR = __DIR__ . '/../cache';
    const BASE_PROMPT_CHATGPT = "Given the mapping delimited by triple backticks ```%s``` translate the text delimited by triple quotes in a valid Elasticsearch DSL query \"\"\"%s\"\"\". Give me only the json code part of the answer. Compress the json output removing spaces.";

    /** 
     * OpenAI client
     */
    private OpenAIClient $openAiClient;
    /**
     * Elasticsearch client
     */
    private EsClient $esClient;

    private string $cacheDir;

    private string $basePrompt;

    private string $lastQuery = '';

    public function __construct(EsClient $esClient, OpenAIClient $openAiClient)
    {
        $this->esClient = $esClient;
        $this->openAiClient = $openAiClient;
        $this->cacheDir = self::CACHE_DIR;
        $this->basePrompt = self::BASE_PROMPT_CHATGPT;
    }

    /**
     * Set the cache folder (default is self::CACHE_DIR)
     */
    public function setCacheFolder(string $folder): void
    {
        if (!is_dir($folder)) {
            throw new MissingDirectoryException(sprintf(
                "The specified folder %s does not exist",
                $folder
            ));
        }
        $this->cacheDir = $folder;
    }

    /**
     * Search in Elasticsearch using natural language.
     * The prompt is sent to ChatGPT for translating in a DSL query.
     * Then the query is sent to Elasticsearch using elasticsearch-php
     * and the result is returned
     * 
     * @param string $index Name of the Elaticserach index to use
     * @param string $prompt The query specified in natural language
     * @param bool $cache Use the cache for mapping and query (true is default)
     */
    public function search(string $index, string $prompt, bool $cache = true): ElasticsearchResponse
    {
        if ($cache) {
            $query = $this->getCachePrompt($prompt);
            if (false === $query) {
                $mapping = $this->getCacheMapping($index);
                if (false === $mapping) {
                    // Get the mapping from Elasticsearch
                    $mapping = $this->getMapping($index);
                }
                // Get the DSL query from ChatGPT
                $query = $this->chatGpt($prompt, $mapping);
            }
        } else {
            // Get the mapping from Elasticsearch
            $mapping = $this->getMapping($index);
            // Get the DSL query from ChatGPT
            $query = $this->chatGpt($prompt, $mapping);
        }
        $this->lastQuery = $query;
        try {
            return $this->esClient->search([
                'index' => $index,
                'body' => $query
            ]);
        } catch (ElasticsearchException $e) {
            $this->deleteCachePrompt($prompt);
            throw new InvalidElasticsearchException(sprintf(
                "The query \"%s\" translated in \"%s\" produced an Elasticsearch error: %s",
                $prompt,
                $query,
                $e->getMessage()
            ));
        }
    }

    /**
     * Returns the last DSL query generated by ChatGPT
     */
    public function getLastQuery(): string
    {
        return $this->lastQuery;
    }

    /**
     * Get the mapping of the index from Elasticsearch
     */
    protected function getMapping(string $index): string
    {
        try {
            $result = $this->esClient->indices()->getMapping([ 'index' => $index]);
            $mapping = $result->asString();
            $this->setCacheMapping($index, $mapping);
            return $mapping;
        } catch (ElasticsearchException $e) {
            throw new InvalidElasticsearchException(sprintf(
                "Error reading the Elasticsearch mapping for %s: %s",
                $index,
                $e->getMessage()
            ));
        }
    }

    /**
     * Performs the prompt questions to ChatGPT using
     * the gpt-3.5-turbo as suggested in https://platform.openai.com/docs/models/gpt-3-5
     */
    protected function chatGpt(string $query, string $mapping): string
    {
        $prompt = sprintf($this->basePrompt, trim($mapping), trim($query));
        $response = $this->openAiClient->chat()->create([
            'model' => 'gpt-3.5-turbo',
            'messages' => [
                ['role' => 'user', 'content' => $prompt]
            ]
        ]);
        $answer = $response->choices[0]->message->content; 
        if (!empty($answer)) {
            $this->setCachePrompt($query, $answer);
            return $answer;            
        } 
        throw new InvalidChatGPTException(sprintf(
            "ChatGPT did not produce an Elasticsearch DSL query: %s",
            var_export($answer, true)
        ));
    }

    protected function getCacheMapping(string $index): string|false
    {
        $filename =  sprintf("%s/%s.json", $this->cacheDir, $index);
        if (file_exists($filename)) {
            return file_get_contents($filename);
        }
        return false;
    }

    protected function setCacheMapping(string $index, string $mapping): bool
    {
        $filename = sprintf("%s/%s.json", $this->cacheDir, $index);
        return file_put_contents($filename, $mapping, LOCK_EX) !== false;
    }

    protected function getCachePrompt(string $prompt): string|false
    {
        $filename = sprintf("%s/%s.json", $this->cacheDir, md5($prompt));
        if (file_exists($filename)) {
            return file_get_contents($filename);
        }
        return false;
    }

    protected function setCachePrompt(string $prompt, string $query): bool
    {
        $filename = sprintf("%s/%s.json", $this->cacheDir, md5($prompt));
        return file_put_contents($filename, $query, LOCK_EX) !== false;
    }

    protected function deleteCachePrompt(string $prompt): void
    {
        $filename = sprintf("%s/%s.json", $this->cacheDir, md5($prompt));
        if (file_exists($filename)) {
            unlink($filename);
        }
    }
}